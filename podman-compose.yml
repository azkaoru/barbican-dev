version: '3.8'

services:
  # Rename postgres to db to match the sample configuration
  db:
    image: registry.redhat.io/rhel9/postgresql-15:latest
    container_name: barbican_postgres
    #network_mode: host
    environment:
      POSTGRESQL_USER: barbican
      POSTGRESQL_PASSWORD: barbican
      POSTGRESQL_DATABASE: barbican
      POSTGRESQL_ADMIN_PASSWORD: admin123
    volumes:
      - postgres_data:/var/lib/pgsql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U barbican -d barbican"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-init:
    image: registry.redhat.io/rhel9/postgresql-15:latest
    container_name: barbican_postgres_init
    #network_mode: host
    depends_on:
      db:
        condition: service_healthy
    environment:
      POSTGRESQL_USER: barbican
      POSTGRESQL_PASSWORD: barbican
      POSTGRESQL_DATABASE: barbican
      POSTGRESQL_ADMIN_PASSWORD: admin123
      PGPASSWORD: admin123
    volumes:
      - ./init-db:/scripts
    command:
      - /bin/bash
      - -c
      - |
        echo "Starting database initialization..."
        echo "PostgreSQL is ready, running initialization scripts..."
        psql -h barbican_postgres -U postgres  postgres -f /scripts/init.sql      
        # Run all scripts i the scripts directory
        #for script in /scripts/*.sh; do
        #  if [ -f "$script" ]; then
        #    echo "Executing: $script"
        #    bash "$script"
        #  fi
        #done
        sleep 300 
        echo "Database initialization completed"
    restart: "no"
    ports:
      - "5432:5432"

  memcached:
    image: registry.redhat.io/ubi9/ubi:latest
    container_name: barbican_memcached
    command:
      - /bin/bash
      - -c
      - |
        dnf install -y memcached
        memcached -u memcached -p 11211 -m 64 -c 1024 -v
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "echo stats | nc barbican_memcached 11211"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "11211:11211"

  # Keystone database synchronization one-shot container
  keystone-db-sync:
    image: rockylinux/rockylinux:9.5
    container_name: keystone_db_sync
    command:
      - /bin/bash
      - -c
      - |
        # Install EPEL repository first
        dnf install -y epel-release
        # Install OpenStack repository
        dnf install -y centos-release-openstack-epoxy
        # Install keystone packages
        dnf install -y openstack-keystone python3-keystonemiddleware python3-mod_wsgi python3-openstackclient python3-psycopg2
        # Run database sync
        keystone-manage db_sync
    volumes:
      - ./config/keystone.conf:/etc/keystone/keystone.conf:ro
    environment:
      - OS_DB_CONNECTION=postgresql+psycopg2://keystone:keystone@db/keystone
    depends_on:
      db:
        condition: service_healthy
      postgres-init:
        condition: service_completed_successfully
    restart: "no"
    
  # Keystone API hosted by Apache service
  keystone_apache:
    image: httpd:2.4-alpine
    container_name: openstack_keystone_api
    ports:
      - "5000:5000"
      - "35357:35357"
    volumes:
      # Keystone WSGI configuration for Apache
      - ./config/wsgi-keystone.conf:/usr/local/apache2/conf/extra/wsgi-keystone.conf:ro
      # Keystone configuration file
      - ./config/keystone.conf:/etc/keystone/keystone.conf:ro
    command:
      - /bin/sh
      - -c
      - |
        # Include the Keystone WSGI configuration
        echo "Include conf/extra/wsgi-keystone.conf" >> /usr/local/apache2/conf/httpd.conf
        # Start Apache
        httpd-foreground
    depends_on:
      keystone-db-sync:
        condition: service_completed_successfully
      db:
        condition: service_healthy
      memcached:
        condition: service_started
    restart: unless-stopped

volumes:
  postgres_data:
  keystone_fernet:
