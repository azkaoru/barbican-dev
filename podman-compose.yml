version: '3.8'

services:
  postgres:
    image: registry.redhat.io/rhel9/postgresql-15:latest
    container_name: barbican_postgres
    network_mode: host
    environment:
      POSTGRESQL_USER: barbican
      POSTGRESQL_PASSWORD: barbican
      POSTGRESQL_DATABASE: barbican
      POSTGRESQL_ADMIN_PASSWORD: admin123
    volumes:
      - postgres_data:/var/lib/pgsql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U barbican -d barbican"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-init:
    image: registry.redhat.io/rhel9/postgresql-15:latest
    container_name: barbican_postgres_init
    network_mode: host
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      POSTGRESQL_USER: barbican
      POSTGRESQL_PASSWORD: barbican
      POSTGRESQL_DATABASE: barbican
      POSTGRESQL_ADMIN_PASSWORD: admin123
      PGPASSWORD: admin123
    volumes:
      - ./init-db:/scripts
    command:
      - /bin/bash
      - -c
      - |
        echo "Starting database initialization..."
        
        # Wait for PostgreSQL to be fully ready
        while ! pg_isready -U barbican -d barbican; do
          echo 'Waiting for PostgreSQL...'
          sleep 2
        done
        
        echo "PostgreSQL is ready, running initialization scripts..."
        
        # Run all scripts in the scripts directory
        for script in /scripts/*.sh; do
          if [ -f "$script" ]; then
            echo "Executing: $script"
            bash "$script"
          fi
        done
        
        echo "Database initialization completed"
    restart: "no"

  memcached:
    image: registry.redhat.io/ubi9/ubi:latest
    container_name: barbican_memcached
    network_mode: host
    command:
      - /bin/bash
      - -c
      - |
        dnf install -y memcached
        memcached -u memcached -p 11211 -m 64 -c 1024 -v
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "echo stats | nc localhost 11211"]
      interval: 10s
      timeout: 5s
      retries: 5

  keystone:
    image: registry.redhat.io/ubi9/ubi:latest
    container_name: barbican_keystone
    network_mode: host
    depends_on:
      postgres:
        condition: service_healthy
      postgres-init:
        condition: service_completed_successfully
      memcached:
        condition: service_healthy
    environment:
      # Database configuration
      DATABASE_URL: postgresql://keystone:keystone@localhost:5432/keystone
      # Keystone configuration
      ADMIN_TOKEN: devstacker
      ADMIN_PASSWORD: admin123
      SERVICE_PASSWORD: service123
      # Cache configuration
      CACHE_BACKEND: oslo_cache.memcache_pool
      CACHE_MEMCACHE_SERVERS: localhost:11211
    volumes:
      - ./keystone-config:/etc/keystone
      - ./keystone-logs:/var/log/keystone
      - keystone_fernet:/etc/keystone/fernet-keys
    command:
      - /bin/bash
      - -c
      - |
        # Install required packages
        dnf update -y
        dnf install -y python3 python3-pip httpd python3-mod_wsgi postgresql-devel gcc python3-devel
        
        # Install OpenStack Keystone
        pip3 install --upgrade pip
        pip3 install keystone python-keystoneclient psycopg2-binary pymemcache
        
        # Create keystone user and directories
        useradd -r -s /bin/false keystone || true
        mkdir -p /etc/keystone /var/log/keystone /var/lib/keystone
        chown -R keystone:keystone /etc/keystone /var/log/keystone /var/lib/keystone
        
        # Generate Fernet keys
        keystone-manage fernet_setup --keystone-user keystone --keystone-group keystone
        keystone-manage credential_setup --keystone-user keystone --keystone-group keystone
        
        # Configure Apache for Keystone
        cat > /etc/httpd/conf.d/wsgi-keystone.conf << 'EOF'
        Listen 5000
        Listen 35357

        <VirtualHost *:5000>
            WSGIDaemonProcess keystone-public processes=5 threads=1 user=keystone group=keystone display-name=%{GROUP}
            WSGIProcessGroup keystone-public
            WSGIScriptAlias / /usr/local/bin/keystone-wsgi-public
            WSGIApplicationGroup %{GLOBAL}
            WSGIPassAuthorization On
            ErrorLogFormat "%{cu}t %M"
            ErrorLog /var/log/keystone/keystone.log
            CustomLog /var/log/keystone/keystone_access.log combined

            <Directory /usr/local/bin>
                WSGIProcessGroup keystone-public
                WSGIApplicationGroup %{GLOBAL}
                Require all granted
            </Directory>
        </VirtualHost>

        <VirtualHost *:35357>
            WSGIDaemonProcess keystone-admin processes=5 threads=1 user=keystone group=keystone display-name=%{GROUP}
            WSGIProcessGroup keystone-admin
            WSGIScriptAlias / /usr/local/bin/keystone-wsgi-admin
            WSGIApplicationGroup %{GLOBAL}
            WSGIPassAuthorization On
            ErrorLogFormat "%{cu}t %M"
            ErrorLog /var/log/keystone/keystone.log
            CustomLog /var/log/keystone/keystone_access.log combined

            <Directory /usr/local/bin>
                WSGIProcessGroup keystone-admin
                WSGIApplicationGroup %{GLOBAL}
                Require all granted
            </Directory>
        </VirtualHost>
        EOF
        
        # Wait for database to be ready
        while ! pg_isready -h localhost -p 5432 -U barbican; do
          echo 'Waiting for PostgreSQL...'
          sleep 5
        done
        
        # Database and user should already be created by postgres-init service
        # Initialize Keystone database
        keystone-manage db_sync
        
        # Bootstrap Keystone
        keystone-manage bootstrap --bootstrap-password admin123 \
          --bootstrap-admin-url http://localhost:35357/v3/ \
          --bootstrap-internal-url http://localhost:5000/v3/ \
          --bootstrap-public-url http://localhost:5000/v3/ \
          --bootstrap-region-id RegionOne
        
        # Start Apache
        /usr/sbin/httpd -D FOREGROUND
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000/v3 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  postgres_data:
  keystone_fernet: